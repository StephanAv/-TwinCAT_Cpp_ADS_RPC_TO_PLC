///////////////////////////////////////////////////////////////////////////////
// AdsClientModule.h
#pragma once

#include "CppAdsClientInterfaces.h"
#include "AdsR0.h"
#include <string>
// parameter ids for TwinCAT module AdsClientModule with disabled code generation
// could be moved to CppAdsClientServices.h
const PTCID PID_AdsClientModuleAdsPort        = 0x00000002;

class CAdsClientModule 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
	, public CAdsR0FifoPort
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST_LIB()
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CAdsClientModule();
	virtual	~CAdsClientModule();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

	// CAds

	virtual void AdsReadWriteCon(
		AmsAddr& rAddr,
		ULONG invokeId,
		ULONG nResult,
		ULONG cbLength,
		PVOID pData
	);

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	WORD m_DefaultAdsPort;
	WORD m_ContextAdsPort;
	ULONG m_Counter;
	AdsClientModuleInputs m_Inputs;
	AdsClientModuleOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	AmsAddr m_amsAddrTarget;
	ULONG m_invokeId;
	ULONG m_getMethodHdlInvokeId;
	ULONG m_invokeRpcMethodInvokeId;
	int m_getHdlRetryCnt;
	int m_invokeRpcRetryCnt;
	UINT32 m_methodHdl;
	std::string m_methodName;

	bool m_bGetHdlContinue;
	bool m_bInvokeRpcContinue;
	char m_rpc_arguments[8];

	INT32 m_rpcMethodReturnVal;



	void SubmitAdsReadReq();

	enum 
	{
		invokeIdReadByOidAndPid = 1
	};
	ULONG  m_ReadByOidAndPid;
};
