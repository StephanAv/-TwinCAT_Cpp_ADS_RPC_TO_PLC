///////////////////////////////////////////////////////////////////////////////
// AdsClientModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "AdsClientModule.h"
#include "CppAdsClientVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CAdsClientModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CAdsClientModule
BEGIN_INTERFACE_MAP(CAdsClientModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CAdsClientModule, VID_CppAdsClient, CID_CppAdsClientCAdsClientModule)
IMPLEMENT_ITCOMOBJECT(CAdsClientModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CAdsClientModule)
IMPLEMENT_ITCADI(CAdsClientModule)
IMPLEMENT_ITCWATCHSOURCE(CAdsClientModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CAdsClientModule 
BEGIN_SETOBJPARA_MAP(CAdsClientModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_AdsClientModuleDefaultAdsPort, m_DefaultAdsPort)
	SETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	SETOBJPARA_VALUE(PID_AdsClientModuleCounter, m_Counter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CAdsClientModule 
BEGIN_GETOBJPARA_MAP(CAdsClientModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_AdsClientModuleDefaultAdsPort, m_DefaultAdsPort)
	GETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	GETOBJPARA_VALUE(PID_AdsClientModuleCounter, m_Counter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
	GETOBJPARA_TYPE_CODE(PID_AdsClientModuleAdsPort, WORD, *p = AmsGetPort())
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CAdsClientModule
BEGIN_OBJPARAWATCH_MAP(CAdsClientModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_AdsClientModuleCounter, m_Counter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CAdsClientModule
BEGIN_OBJDATAAREA_MAP(CAdsClientModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_AdsClientModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_AdsClientModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CAdsClientModule::CAdsClientModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_invokeId(0)
	, m_getMethodHdlInvokeId(0)
	, m_invokeRpcMethodInvokeId(0)
	, m_getHdlRetryCnt(0)
	, m_invokeRpcRetryCnt(0)
	, m_methodHdl(0)
	, m_bGetHdlContinue(false)
	, m_bInvokeRpcContinue(false)
	, m_rpcMethodReturnVal(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_DefaultAdsPort = 0;
	m_ContextAdsPort = 0;
	m_Counter = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
	m_Outputs.AdsState = eAdsRpcState::Idle;
}

///////////////////////////////////////////////////////////////////////////////
CAdsClientModule::~CAdsClientModule() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CAdsClientModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CAdsClientModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = SUCCEEDED(hr) ? InitAmsPort(m_spSrv, m_DefaultAdsPort) : hr;

	// cleanup on failure
	if (FAILED(hr))
	{
		ShutdownAmsPort();
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CAdsClientModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CAdsClientModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CAdsClientModule::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	ShutdownAmsPort();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CAdsClientModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// handle pending ADS indications and confirmations
	CheckOrders();

	if (m_Inputs.bReset)
	{
		//memset(&m_rpc_arguments, 0, sizeof(m_rpc_arguments));
		m_invokeId = 0;
		m_Inputs.bReset = false;
		m_Outputs.AdsError = 0;
		m_Outputs.AdsState = eAdsRpcState::Idle;
	}


	if (m_Outputs.AdsState == eAdsRpcState::Idle)
	{
		ULONGLONG cnt = 0;
		if (SUCCEEDED(ipTask->GetCycleCounter(&cnt)))
		{
			if (cnt % 100 == 0)
			{
				//m_AdsRpcState = eAdsRpcState::Init;
				m_Outputs.AdsState = eAdsRpcState::Init;
			}
		}
	}
	
	//switch (m_AdsRpcState){
	switch (m_Outputs.AdsState)
	{
	case eAdsRpcState::Idle:
		break;

	case eAdsRpcState::Init:
		m_amsAddrTarget.netId = this->AmsGetNetId();
		m_amsAddrTarget.port = 851;
		m_methodName = "MAIN.fb_rpc#M_add";

		m_bGetHdlContinue = false;
		m_bInvokeRpcContinue = false;

		//m_AdsRpcState = eAdsRpcState::GetMethodHdl_Req;
		m_Outputs.AdsState = eAdsRpcState::GetMethodHdl_Req;
		break;

	case eAdsRpcState::GetMethodHdl_Req:
		// Submit RW Request to get a handle to the RPC method
		m_getHdlRetryCnt = 100;
		m_getMethodHdlInvokeId = ++m_invokeId;

		hr = AdsReadWriteReq
			(
				m_amsAddrTarget,			// AmsAddr
				m_getMethodHdlInvokeId,		// Invoke Id
				ADSIGRP_SYM_HNDBYNAME,		// Index Group
				0,							// Index Offset
				sizeof(m_methodHdl),		// Read Length  
				m_methodName.length(),		// Write Length
				(PVOID)m_methodName.c_str()	// Pointer to Data
			);
		if (hr != ADSERR_NOERR)
		{
			m_Trace.Log(tlError, FNAMEA "GetMethodHdl: AdsReadWriteReq failed with error=0x%08x(%s)", hr, AdsGetErrorText(hr));
			// TODO: Handle error case
		}
		else
		{
			//m_Trace.Log(tlInfo, FNAMEA "GetMethodHdl: AdsReadWriteReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_AdsClientModuleAdsPort);
			m_Outputs.AdsState = eAdsRpcState::GetMethodHdl_Res;
		}
		break;

	case eAdsRpcState::GetMethodHdl_Res:
		// Wair for the handle
		if (m_bGetHdlContinue) {
			m_bGetHdlContinue = false;
			m_Outputs.AdsState = eAdsRpcState::InvokeRpcMethod_Req;
		}

		// Retry GetMethodHdl after 100 cycles
		m_getHdlRetryCnt--;
		if (m_getHdlRetryCnt <= 0) {
			m_Outputs.AdsState = eAdsRpcState::GetMethodHdl_Req;
			m_Trace.Log(tlWarning, FNAMEA "GetMethodHdl: No method handle received - retry");
		}

		break;

	case eAdsRpcState::InvokeRpcMethod_Req:

		m_invokeRpcRetryCnt = 100;

		// Assemble arguments of the RPC method: DINT + DINT
		*reinterpret_cast<PULONG>(m_rpc_arguments) = m_invokeId;
		*reinterpret_cast<PULONG>(m_rpc_arguments + 4) = m_invokeId;

		// Submit RW Request to call the method

		m_invokeRpcMethodInvokeId = ++m_invokeId;

		hr = AdsReadWriteReq
		(
			m_amsAddrTarget,			// AmsAddr
			m_invokeRpcMethodInvokeId,	// Invoke Id
			ADSIGRP_SYM_VALBYHND,		// Index Group
			m_methodHdl,				// Index Offset
			sizeof(m_methodHdl),		// Read Length - Return value of RPC method: 4 byte (DINT
			sizeof(m_rpc_arguments),	// Write Length
			(PVOID)m_rpc_arguments		// Pointer to Data
		);
		if (hr != ADSERR_NOERR)
		{
			m_Trace.Log(tlError, FNAMEA "GetMethodHdl: AdsReadWriteReq failed with error=0x%08x(%s)", hr, AdsGetErrorText(hr));
			m_Outputs.AdsError = hr;
			m_Outputs.AdsState = eAdsRpcState::AdsError;
		}
		else
		{
			//m_Trace.Log(tlInfo, FNAMEA "GetMethodHdl: AdsReadWriteReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_AdsClientModuleAdsPort);
			m_Outputs.AdsState = eAdsRpcState::InvokeRpcMethod_Res;
		}
		break;

	case eAdsRpcState::InvokeRpcMethod_Res:

		// Repeat InvokeRpcMethod every 100 cycles
		m_invokeRpcRetryCnt--;
		if (m_invokeRpcRetryCnt <= 0) {
			m_Outputs.AdsState = eAdsRpcState::InvokeRpcMethod_Req;
		}
		break;

	case eAdsRpcState::AdsError:
		break;
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CAdsClientModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CAdsClientModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}


void CAdsClientModule::AdsReadWriteCon(AmsAddr& rAddr, ULONG invokeId, ULONG nResult, ULONG cbLength, PVOID pData)
{
	//m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, nResult=0x%08x, cbLength=%d, pData=0x%p",
	//	m_objId.value, invokeId, nResult, cbLength, pData);

	if (invokeId == m_invokeId)
	{
		if (nResult != ADSERR_NOERR)
		{
			m_Trace.Log(tlError, FNAMEA "ReadWrite failed - error returnded: 0x%x(%s)",
				nResult, AdsGetErrorText(nResult));

			m_Outputs.AdsError = nResult;
			m_Outputs.AdsState = eAdsRpcState::AdsError;
		}
		else if (invokeId == m_getMethodHdlInvokeId && cbLength == sizeof(m_methodHdl))
		{
			m_methodHdl = *reinterpret_cast<PUINT32>(pData);
			m_Trace.Log(tlVerbose, FENTERA "--- METHOD HANDLE RETURNED ---  0x%x", m_methodHdl);
			m_bGetHdlContinue = true;
		}
		else if (invokeId == m_invokeRpcMethodInvokeId && cbLength == sizeof(m_rpcMethodReturnVal)) {

			m_rpcMethodReturnVal = *reinterpret_cast<PINT32>(pData);
			m_bInvokeRpcContinue = true;
			m_Trace.Log(tlVerbose, FENTERA "--- RPC METHOD CALL SUCCESSFULL --- M_Add returned %d", m_rpcMethodReturnVal);
		}
	}
	else
	{
		__super::AdsReadWriteCon(rAddr, invokeId, nResult, cbLength, pData);
	}
}
